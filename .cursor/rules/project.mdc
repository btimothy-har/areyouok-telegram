---
alwaysApply: true
---
# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

## 3rd Party Documentation

When working with 3rd party libraries or frameworks, use `mcp__context7` to retrieve up-to-date documentation.

This is especially important for core libraries like Pydantic, PydanticAI and Python-Telegram-Bot.

## Project Overview

Are You OK is an empathic LLM Telegram bot application designed to be a day-to-day emotional companion.

The repository is structured around the singular Telegram bot application:
- **/src/areyouok_telegram**: the Telegram bot application
- **/tests**: Test suite for the application
- **/scripts**: Utility and/or development scripts

The Telegram bot application is intentionally self-contained to simplify open-source distribution.

## Commands

This project uses `uv` for Python package management. All commands should be run from the project root:

- **Setup/Update dependencies**: `uv sync`
- **Run the application**: `uv run -m areyouok_telegram.main`
- **Run tests (with coverage by default)**: `uv run pytest --cov=areyouok_telegram --cov-report=term-missing .`
- **Run a single test**: `uv run pytest tests/path/to/test_file.py::TestClass::test_method`
- **Lint code**: `uv run ruff check . && uv run ruff format --check .`
- **Fix linting issues**:`uv run ruff check --fix . && uv run ruff format .`

## Application Architecture

### Core Application (`src/areyouok_telegram/`)
Components:
- **`main.py`**: Entry point with uvloop event loop, Logfire logging, and data scrubbing for privacy.
- **`app.py`**: Application factory creating Telegram bot with concurrent updates support.
- **`config.py`**: Environment configuration loading from `.env` file (bot token, database connection, etc.); All environment variables should be declared here.

### Data Layer (`src/areyouok_telegram/data/`)
- **Data Models**: SQLAlchemy ORM with PostgreSQL database. `db_conn (AsyncSession)` should be passed in as the only positional arguments on data model methods. All other arguments must be keyword-based.
- **`connection.py`**: Async PostgreSQL connection management. The context manager handles commits, rollbacks, and session close.

### Telegram Event Handlers (`src/areyouok_telegram/handlers/`)
- **`globals.py`**: Global event handlers for non-specific events: `on_error_event`, `on_new_update`.
- **`messages.py`**: Message event handlers when the application receives a new message.
- **`commands.py`**: Command handlers for bot commands (denoted by slash prefix).
- **`media_utils.py`**: Utilities for handling media content.

### Jobs (`src/areyouok_telegram/jobs/`)
- **`conversations.py`**: Core conversation/response handler. Interfaces with the LLM integration to generate AI responses.
- **`ping.py`**: Health check ping job.
- **`data_log_warning.py`**: Data logging warning job.
- **`base.py`**: Base job declaration providing a common interface for all jobs.

### Encryption Utilities (`src/areyouok_telegram/encryption/`)
- Utility functions to handle generation of new keys, encrypting and decrypting content.

### LLM Integration (`src/areyouok_telegram/llms/`)
- **`chat/`**: Main chat agent with dynamic personalities (anchoring, celebration, exploration, witnessing)
- **`context_compression/`**: Context compression agent for managing conversation history
- **`models/`**: LLM model definitions and base classes using pydantic-ai
- **Miscellaneous agents**: Content validation and utility agents (agent_anonymizer.py, agent_content_check.py, agent_country_timezone.py)

## Error Handling

- Use tenacity to handle retryable errors (e.g. time outs, HTTP errors, etc).
- Log, Alert, and Inform application failures:
  - Log the exception traceback in Logfire
  - Alert application developers/owners
  - Inform the user that a failure has occurred

## Test Strategy
- Uses **pytest** with async support (`pytest-asyncio`)
- Test coverage with **pytest-cov** (branch coverage enabled)
- Expected minimum coverage of 85%, with exclusions
- **Unit tests only**: All testing focuses on individual function behavior
- All external dependencies (database, APIs, LLMs) are mocked using `unittest.mock` or `pytest-mock`
- Time-based functionality frozen during tests using **freezegun**
- Tests organized in `tests/` mirroring source structure
- **factory-boy** for generating test data
- Test fixtures best practices:
  - Shared fixtures in `tests/conftest.py`
  - Suite-specific fixtures in test files
  - Use fixtures as arguments when modifying them
  - Use `@pytest.mark.usefixtures` when not modifying