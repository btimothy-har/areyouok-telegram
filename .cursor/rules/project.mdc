---
alwaysApply: true
---
# Are You OK? Telegram Application

Are You OK? is an empathic LLM Telegram bot application designed to be a day-to-day emotional companion supporting individual mental health wellness.

**Repository Structure:**
- **/src/areyouok_telegram**: Main application code
- **/tests**: Test suite (mirrors source structure)
- **/scripts**: Utility and development scripts
- **/.cursor/rules**: Component-specific coding rules

The application is intentionally self-contained to simplify open-source distribution.

## Quick Reference

### Development Commands

This project uses `uv` for Python package management. Run from project root:

```bash
# Setup
uv sync                                          # Install/update dependencies

# Development
uv run -m areyouok_telegram.main                # Run application
uv run ruff check . && uv run ruff format .     # Lint and format
uv run pytest --cov=areyouok_telegram .         # Run tests with coverage

# CLI Tools
uv run generate-salt                             # Generate encryption salt
uv run reset-db                                  # Reset database
uv run simulate                                  # Run conversation simulation
```

### 3rd Party Documentation

When working with external libraries, use `mcp_context7` to retrieve up-to-date documentation.

**Core libraries requiring doc lookups:**
- **Pydantic** & **PydanticAI**: Data validation and AI agents
- **Python-Telegram-Bot**: Telegram API wrapper
- **SQLAlchemy**: Database ORM
- **Logfire**: Observability

## Architecture Overview

### Core Application (`src/areyouok_telegram/`)
- **`main.py`**: Entry point (uvloop, Logfire setup, data scrubbing)
- **`app.py`**: Application factory (bot initialization)
- **`config.py`**: Environment configuration (**ALL env vars declared here**)
- **`cli.py`**: CLI command definitions
- **`setup/`**: Initialization modules (bot, database, jobs, exceptions)

### Data Layer (`src/areyouok_telegram/data/`)
SQLAlchemy ORM with PostgreSQL. Models organized by domain:
- **`messaging/`**: Chat, Message, Session, Context, MediaFile
- **`users/`**: User, UserMetadata
- **`system/`**: JobState, Notification, Update, CommandUsage
- **`llm/`**: LLMUsage, LLMGeneration

ðŸ‘‰ **See**: `.cursor/rules/data-layer.mdc` for detailed conventions

### Telegram Handlers (`src/areyouok_telegram/handlers/`)
- **`globals.py`**: Global event handlers
- **`messages.py`**: Message event handlers
- **`commands/`**: Command handlers (start, preferences, journal, feedback)
- **`utils/`**: Handler utilities

ðŸ‘‰ **See**: `.cursor/rules/handlers.mdc` for handler patterns

### Background Jobs (`src/areyouok_telegram/jobs/`)
- **`base.py`**: Base job interface
- **`conversations.py`**: AI response generation
- **`ping.py`**: Health checks
- **`data_log_warning.py`**: Data logging alerts

ðŸ‘‰ **See**: `.cursor/rules/jobs.mdc` for job conventions

### LLM Integration (`src/areyouok_telegram/llms/`)
PydanticAI-based agent system:
- **`chat/`**: Personality-based chat agents (anchoring, celebration, exploration, witnessing)
- **`context_compression/`**: Conversation history management
- **`models/`**: LLM model definitions
- **Utility agents**: Content validation, anonymization, settings

ðŸ‘‰ **See**: `.cursor/rules/llms.mdc` for AI architecture

### Security (`src/areyouok_telegram/encryption/`)
Privacy-first design with per-chat Fernet encryption for all user data.

## Core Coding Guidelines

### Error Handling: Three-Tier Approach

**Log â†’ Alert â†’ Inform**
1. **Log** exception to Logfire with full traceback
2. **Alert** developers via developer chat
3. **Inform** user with friendly error message

**Retry Strategy:**
- Use `@db_retry()` decorator for transient failures (timeouts, connection issues)
- Do NOT retry validation errors or business logic failures

### Observability & Privacy

**Structured Logging:**
- Use `@traced()` decorator on key functions
- Set `extract_args=False` for sensitive functions
- **NEVER log**: message content, encryption keys, tokens, PII

**Data Privacy:**
- All user messages encrypted at rest (per-chat Fernet keys)
- Scrub sensitive data before logging
- Use anonymization for logged user content

### Environment Configuration

**Required Variables:**
- `TELEGRAM_BOT_TOKEN`, `PG_CONNECTION_STRING`, `USER_ENCRYPTION_SALT`, `LOGFIRE_TOKEN`
- At least one LLM provider key: `OPENAI_API_KEY`, `ANTHROPIC_API_KEY`, `GEMINI_API_KEY`, or `OPENROUTER_API_KEY`

**All environment variables must be declared in `config.py`**

### Code Quality Standards

**Python:**
- Python 3.12+
- Ruff for linting and formatting (config in `pyproject.toml`)
- Type hints required
- Async/await for I/O operations

## Test Strategy

**Framework & Tools:**
- **pytest** with async support (`pytest-asyncio`)
- **pytest-cov** for coverage reporting (branch coverage enabled)
- **pytest-mock** for mocking
- **freezegun** for time manipulation
- **factory-boy** for test data generation

**Testing Philosophy:**
- Minimum 85% coverage (with documented exclusions)
- **Unit tests only**: Focus on individual function behavior
- **Mock all external dependencies**: Database, APIs, LLMs
- Test organization: Mirror source structure in `tests/`

**Fixture Best Practices:**
- Shared fixtures in `tests/conftest.py`
- Suite-specific fixtures in individual test files
- Use fixtures as **arguments** when modifying them
- Use `@pytest.mark.usefixtures` when not modifying them

**Coverage Exclusions:**
- CLI entry points
- Exception `__init__` methods
- Type checking branches (`if TYPE_CHECKING`)

## Component-Specific Rules

For detailed conventions and patterns, see:
- **`.cursor/rules/data-layer.mdc`**: Database operations, model patterns, encryption
- **`.cursor/rules/handlers.mdc`**: Telegram event handling, command structure
- **`.cursor/rules/jobs.mdc`**: Background job patterns, scheduling
- **`.cursor/rules/llms.mdc`**: AI agent architecture, personality system, RAG
